# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.upload_dir: "/uploads"

    app.thumbnails.upload_dir: "%app.upload_dir%/thumbnails"
    app.thumbnails.base_dir: "/public%app.thumbnails.upload_dir%"

    app.image.embedded: "%app.upload_dir%/embedded"
    app.image.embedded.upload: "%kernel.project_dir%/public%app.image.embedded%"

    app.image.key: "%env(string:GLIDE_KEY)%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: "../src/"
        exclude:
            - "../src/DependencyInjection/"
            - "../src/Entity/"
            - "../src/Kernel.php"

    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - "%env(DATABASE_URL)%"

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\ParamConverter\CustomParamConverter:
        tags:
            - { name: "request.param_converter", converter: 'App\ParamConverter\CustomParamConverter' }

    monolog.formatter.extra_log:
        class: Monolog\Formatter\LineFormatter
        arguments:
            - "[%%datetime%%] %%channel%%.%%level_name%% [%%extra.ip%% %%extra.user%% %%extra.protocol%% %%extra.method%% %%extra.url%%] %%message%% %%context%% %%extra%%\n"

    App\Logger\ExtraLogProcessor:
        tags:
            - { name: monolog.processor }

    App\Service\ImageResizerService:
        arguments:
            $key: "%app.image.key%"

    App\Service\FileUploaderService:
        arguments:
            $embedDirectory: "%app.image.embedded.upload%"
            $embedPath: "%app.image.embedded%"

    # ? Optional
    App\Resolver\QueryParamArgumentResolver:
        tags:
            - { name: controller.argument_value_resolver, priority: 150 }

    App\Doctrine\EventListener\BannerEnumTypeMigrationListener:
        tags:
            - { name: doctrine.event_listener, event: postGenerateSchema }
